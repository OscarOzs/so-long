typedef struct	s_data
{
	void	*img;
	char	*addr;
	int		bits_per_pixel;
	int		line_length;
	int		endian;
	void	*mlx;
	void	*win;
}				t_data;

void	my_mlx_pixel_put(t_data *data, int x, int y, int color)
{
	char	*dst;

	dst = data->addr + (y * data->line_length + x * (data->bits_per_pixel / 8));
	*(unsigned int*)dst = color;
}

int	test(void	*param)
{
	t_engine	*engine;
	int		width = 32;
	int		height = 32;
	int		x = 0;
	int		y = 0;
	int		i = 0;
	int		j = 0;
	char	*text_pixel;

	engine = (t_engine *)param;
	engine->sprite->img_ptr = mlx_xpm_file_to_image(engine->sprite->mlx_ptr, "./textures/gladiator.xpm", &width, &height); // catch texture
	engine->sprite->addr = mlx_get_data_addr(engine->sprite->img_ptr, &engine->sprite->bits_per_pixel, &engine->sprite->line_length, &engine->sprite->endian); // catch pixel de texture
	while (y < 32 && engine->final_img->keycode == 'w')
	{
		while (x < 32)
		{
			text_pixel = engine->sprite->addr + (y * engine->sprite->line_length + x * (engine->sprite->bits_per_pixel / 8)); // put text_pixel sur addr de texture
			my_mlx_pixel_put(engine->final_img, x + i, y + j, text_pixel); // put text_pixel sur addr de image
			x++;
		}
		x = 0;
		y++;
	}
	mlx_put_image_to_window(engine->final_img->mlx_ptr, engine->final_img->win_ptr, engine->final_img->img_ptr, 0, 0);
}
